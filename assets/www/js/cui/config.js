// Generated by CoffeeScript 1.6.3
(function() {
  var Config;

  Config = (function() {
    function Config() {}

    if ((typeof define !== "undefined" && define !== null) && define.amd) {
      define(function() {
        return Config;
      });
    } else if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      module.exports = Config;
    } else {
      window.Config = Config;
    }

    Config.prototype.externalApi = {
      googleCalendar: {
        enable: "true"
      }
    };

    Config.prototype.etc = {
      tts: {
        enable: false
      }
    };

    Config.prototype.event = {
      alerm: {
        time: ""
      }
    };

    Config.toString = function(obj) {
      var parse;
      parse = function(obj, key) {
        var p, _results;
        _results = [];
        for (p in obj) {
          if (Object.prototype.toString.call(obj[p]) === "[object Object]") {
            _results.push(parse(obj[p], key + "." + p));
          } else {
            _results.push(key + "." + p + "\t" + obj[p]);
          }
        }
        return _results;
      };
      return parse(obj, "config").join("\n");
    };

    Config.load = function() {
      var parse;
      parse = function(obj, key) {
        var p, value;
        for (p in obj) {
          if (Object.prototype.toString.call(obj[p]) === "[object Object]") {
            parse(obj[p], key + "." + p);
          } else {
            value = window.localStorage.getItem(key + "." + p);
            obj[p] = value === "true" ? true : value === "false" ? false : value;
          }
        }
        return obj;
      };
      return parse(new Config(), "config");
    };

    Config.save = function(obj) {
      var parse, text;
      parse = function(obj, key) {
        var p, _results;
        _results = [];
        for (p in obj) {
          if (Object.prototype.toString.call(obj[p]) === "[object Object]") {
            _results.push(parse(obj[p], key + "." + p));
          } else {
            _results.push(window.localStorage.setItem(key + "." + p, obj[p]));
          }
        }
        return _results;
      };
      parse(obj, "config");
      text = Config.toString(obj);
      if (typeof LocalFileSystem !== "undefined" && LocalFileSystem !== null) {
        return FileUtil.open("COLAS/config.tsv", function(file) {
          return file.write(text);
        });
      } else {
        console.log("not found LocalFileSystem");
        return console.log(text);
      }
    };

    return Config;

  })();

}).call(this);
